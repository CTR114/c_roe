Lab 6 -- Linked Lists -- Part 1
Due Thursday 3-9-17
Student:

   Coding Style / UI / Documentation: __ pts out of 4

   Student testing code, node1_test.cpp: __ pts out of 16
      Minimum Expectations:
         - test_list_length_and_head_insert
            1. Head insert into empty list; activate length function
            2. Head insert into non-empty list; activate length function
         - test_list_insert
            1. Insert at tail
            2. Insert at middle
         - test_list_head_remove
            1. List_head_remove for list of length 1
            2. List_head_remove for list of length > 1
         - test_list_remove
            1. Remove from tail
            2. Remove from middle

   node1.cpp implementation: __ pts out of 20
         list_length
         list_head_insert
         list_insert
         list_search
         const list_search
         list_locate
         const list_locate
         list_head_remove
         list_remove
         list_clear

         >>> Report from lab6.part1_mastertest.cpp:

         >>> Report from Valgrind (avoid memory leaks!):

   Late fee, if any (-4 pts per day late):  __ pts

Part 1 TOTAL: __ out of 40

-----------------------------------------------------------

Lab 6 -- Linked Lists -- Part 2
Due Monday 3-13-17
Student:

   Coding Style / UI / Documentation: __ pts out of 5

   Student testing code, List_test.cpp: __ pts out of 25
      Minimum Expectations:
         - test_tail_insert
            1. Tail insert for list of length 0
            2. Tail insert for list of length 1
            3. Tail insert for list of length > 1
         - test_clear
            1. Clear for list of length 0
            2. Clear for list of length 1
            3. Clear for list of length > 1
         - test_head_remove
            1. head_remove for list of length 0
            2. head_remove for list of length > 1
         - test_tail_remove
            1. tail_remove for list of length 0
            2. tail_remove for list of length > 1
         - test_contains
            1. Empty list, false
            2. Length 1, false
            3. Length 1, true
            4. Length >= 3, false
            5. Length >= 3, true (item @ front)
            6. Length >= 3, true (item @ middle)
            7. Length 5, true (item @ back)
         - test_remove_first_of
            1. Length 0, false
            2. Length 1, false
            3. Length 1, true
            4. Typical length, false
            5. Typical length, desired entry is repeated; true (remove head)
            6. Typical length, desired entry is repeated; true (remove middle)
            7. Typical length, desired entry is at tail; true (remove tail)

   List.cpp Part 2 implementation: __ pts out of 30
         List
         ~List
         is_empty() << SHOULD NOT USE A CALL TO "length()"
         clear
         front()
         back()
         head_insert
         tail_insert
         head_remove
         tail_remove
         contains
         remove_first_of << SHOULD NOT USE A CALL TO "contains()"
         List copy constructor
         operator= assignment operator

         >>> Report from lab6.part1_mastertest.cpp:

         >>> Report from Valgrind (avoid memory leaks!):

   Late fee, if any (-6 pts per day late):  __ pts

   Optional Extra Credit (operator[], 6 points max):  __ pts
   Testing code for operator[] (6 points max):        __ pts

Part 2 TOTAL: __ out of 60

