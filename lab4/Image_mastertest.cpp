// Image_mastertest.cpp
// Tests for Image class
// Theresa Wilson, 2-20-16

// NOTE:  Execution of student code will still be halted by fatal errors such
// as segmentation faults and infinite loops.  Make use of the methods
// `segFault` and `infiniteLoop` in these situations.

// NOTE:  As much as possible, use only *basic* functionality in implementing
// testing code.

// NOTE:  Since the testing code is implemented using the student's
// implementations for basic functionality (part 1), any problems in basic functionality
// must be "patched" by the instructor (after recording the relevant info)
// before re-running the tests.  Save the altered code as, for example,
// Sequence_patched.cpp, then re-compile to evaluate non-basic functionality.

// ========================= Testing Boilerplate =========================
#include <cassert>
#include <sstream>
#include <fstream>
#include <iostream>
#include <string>
#include "Pixel.h"
#include "Image.h"

using namespace std;
using namespace imagelab;

extern string EXC_OUT_OF_BOUNDS;
extern string EXC_LIST_NOT_ORDERED;

const string err = "";
int tests_passed = 0;
int tests_failed = 0;
int segmentation_faults = 0;
int infinite_loops = 0;

// print method
// prints the given string plus endl
void print(string str) {
   cout << str << endl;
}

// segFault method
// When student code creates a segmentation fault, comment out the corresponding
// test call in main and *insert* a call to segFault.
// Use the parameter `desc` to indicate the failing test.
// Result:  prints an appropriate message; increments tests_failed counter and
// segmentation_faults counter.
void segFault(string desc) {
   print("### TEST FAILED ###: " + desc + "; segmentation fault");
   tests_failed++;
   segmentation_faults++;
}

// infiniteLoop method
// When student code creates an infinite loop, comment out the corresponding
// test call in main and *insert* a call to infiniteLoop.
// Use the parameter `desc` to indicate the failing test.
// Result:  prints an appropriate message; increments tests_failed counter and
// infinite_loops counter.
void infiniteLoop(string desc) {
   print("### TEST FAILED ###: " + desc + "; infinite loop");
   tests_failed++;
   infinite_loops++;
}

// itFailedToThrowCorrectException method
// input: string desc, describes the test which was run
void itFailedToThrowCorrectException(string desc) {
   print("### TEST FAILED ###: " + desc + "; threw non-string exeception");
   tests_failed++;
}

// itFailed method
// ## always call this method when a test fails, except when the code under
// test threw the *wrong* exception -- see `itFailedToThrowCorrectException` ##
// prints message for failed test
// increments the count of failed tests
void itFailed(string str) {
   print("### TEST FAILED ###: " + str);
   tests_failed++;
}

// itPassed method
// ## always call this method when a test passes ##
// prints message for passed test
// increments the count of passed tests
void itPassed(string str) {
   print("TEST PASSED: " + str);
   tests_passed++;
}

// stripSpaceAndMakeLowerCase function
// input:  string s
// output: string
//
// makes a copy of string s, strips ' ' and '\n' from
// the copy, and changes all remaining chars to lower case
//
// returns this altered copy of the string
//
// leaves the original string s unchanged
string stripSpacesAndMakeLowerCase(string s)
{
   string str = s;
   for (unsigned int i = 0; i < str.length(); i++)
   {
      if (str[i]==' ' or str[i]=='\n') {
         str.erase(i,1);
         i--;
      }
      else { str[i] = tolower(str[i]); }
   }
   return str;
}

// laxString method
// use for comparing strings generated by stream output (<<)
// ignores whitespace, including newlines
// return:  true iff s1 and s2 are equivalent after ignoring whitespace
bool laxString(string s1,string s2)
{
   string x = stripSpacesAndMakeLowerCase(s1);
   string y = stripSpacesAndMakeLowerCase(s2);
   return x == y;
}

// ========================= Tests =========================

// Test Image basic functionality
//    Image(w, h, r, g, b);   // (default) constructor
//    getFormat()
//    getMaxColor()
//    getWidth()
//    getHeight()
//    getPixel()
//    setPixel(w, h, pix)
//    setPixel(w, h, r, g, b)

// construct an image with default parameters
// use getFormat(), getMaxColor(), getWidth(), getHeight()
void test_constructor_1() {
   Image img1;
   string desc = "construct an image with default parameters";
   try {
      if (img1.getFormat() != "P3") { throw err; }
      if (img1.getMaxColor() != 255) { throw err; }
      if (img1.getWidth() != 100) { throw err; }
      if (img1.getHeight() != 100) { throw err; }
      itPassed(desc);
   }
   catch(string s){ itFailed(desc + " " + s); }
}

// construct an image with non-default parameters
// use getFormat(), getMaxColor(), getWidth(), getHeight()
void test_constructor_2() {
   Image img1(250,400);
   string desc = "construct an image with non-default parameters";
   try {
      if (img1.getFormat() != "P3") { throw err; }
      if (img1.getMaxColor() != 255) { throw err; }
      if (img1.getWidth() != 250) { throw err; }
      if (img1.getHeight() != 400) { throw err; }
      itPassed(desc);
   }
   catch(string s){ itFailed(desc + " " + s); }
}

// construct an image with default pixels
// use getPixel()
void test_constructor_3() {
   Image img1;
   Pixel black;
   string desc = "construct an image with default pixels";
   try {
      for (int y = 0; y < img1.getHeight(); y++)
         for (int x = 0; x < img1.getWidth(); x++)
            if (img1.getPixel(x,y) != black) { throw err; }
      itPassed(desc);
   }
   catch(string s){ itFailed(desc + " " + s); }
}

// construct an image with non-default pixels
// use getPixel()
void test_constructor_4() {
   Image img1(250, 400, 96, 66, 236);
   Pixel pix(96, 66, 236);
   string desc = "construct an image with non-default pixels";
   try {
      for (int y = 0; y < img1.getHeight(); y++)
         for (int x = 0; x < img1.getWidth(); x++)
            if (img1.getPixel(x,y) != pix) { throw err; }
      itPassed(desc);
   }
   catch(string s){ itFailed(desc + " " + s); }
}

// use setPixel to change pixel colors in an image
// use getPixel()
void test_setters_1() {
   Image img1;
   Pixel black;
   Pixel pix1(96, 66, 236);
   string desc = "use setPixel with a pixel to change pixel colors in an image";

   img1.setPixel(25, 25, pix1);
   try {
      for (int y = 0; y < img1.getHeight(); y++)
      {
         for (int x = 0; x < img1.getWidth(); x++)
         {
            if (x == 25 && y == 25) { if (img1.getPixel(x,y) != pix1) { throw err; } }
            else if (img1.getPixel(x,y) != black) { throw err; }
         }
      }
      itPassed(desc);
   }
   catch(string s){ itFailed(desc + " " + s); }
}

// use setPixel to change pixel colors in an image
// use getPixel()
void test_setters_2() {
   Image img1;
   Pixel black;
   Pixel pix1(96, 66, 236);
   string desc = "use setPixel with a pixel to change pixel colors in an image";

   img1.setPixel(1, 98, pix1);
   try {
      for (int y = 0; y < img1.getHeight(); y++)
      {
         for (int x = 0; x < img1.getWidth(); x++)
         {
            if (x == 1 && y == 98) { if (img1.getPixel(x,y) != pix1) { throw err; } }
            else if (img1.getPixel(x,y) != black) { throw err; }
         }
      }
      itPassed(desc);
   }
   catch(string s){ itFailed(desc + " " + s); }
}

// use setPixel to change pixel colors in an image
// use getPixel()
void test_setters_3() {
   Image img1;
   Pixel black;
   Pixel pix1(96, 66, 236);
   string desc = "use setPixel with a pixel to change pixel colors in an image";

   img1.setPixel(97, 3, pix1);
   try {
      for (int y = 0; y < img1.getHeight(); y++)
      {
         for (int x = 0; x < img1.getWidth(); x++)
         {
            if (x == 97 && y == 3) { if (img1.getPixel(x,y) != pix1) { throw err; } }
            else if (img1.getPixel(x,y) != black) { throw err; }
         }
      }
      itPassed(desc);
   }
   catch(string s){ itFailed(desc + " " + s); }
}

// use setPixel to change pixel colors in an image
// use getPixel()
void test_setters_4() {
   Image img1;
   Pixel black;
   int red = 96;
   int green = 66;
   int blue = 236;
   Pixel pix1(red, green, blue);
   string desc = "use setPixel with RGB values to change pixel colors in an image";

   img1.setPixel(25, 25, red, green, blue);
   try {
      for (int y = 0; y < img1.getHeight(); y++)
      {
         for (int x = 0; x < img1.getWidth(); x++)
         {
            if (x == 25 && y == 25) { if (img1.getPixel(x,y) != pix1) { throw err; } }
            else if (img1.getPixel(x,y) != black) { throw err; }
         }
      }
      itPassed(desc);
   }
   catch(string s){ itFailed(desc + " " + s); }
}

// use setPixel to change pixel colors in an image
// use getPixel()
void test_setters_5() {
   Image img1;
   Pixel black;
   int red = 96;
   int green = 66;
   int blue = 236;
   Pixel pix1(red, green, blue);
   string desc = "use setPixel with RGB values to change pixel colors in an image";

   img1.setPixel(4, 96, red, green, blue);
   try {
      for (int y = 0; y < img1.getHeight(); y++)
      {
         for (int x = 0; x < img1.getWidth(); x++)
         {
            if (x == 4 && y == 96) { if (img1.getPixel(x,y) != pix1) { throw err; } }
            else if (img1.getPixel(x,y) != black) { throw err; }
         }
      }
      itPassed(desc);
   }
   catch(string s){ itFailed(desc + " " + s); }
}

// use setPixel to change pixel colors in an image
// use getPixel()
void test_setters_6() {
   Image img1;
   Pixel black;
   int red = 96;
   int green = 66;
   int blue = 236;
   Pixel pix1(red, green, blue);
   string desc = "use setPixel with RGB values to change pixel colors in an image";

   img1.setPixel(95, 5, red, green, blue);
   try {
      for (int y = 0; y < img1.getHeight(); y++)
      {
         for (int x = 0; x < img1.getWidth(); x++)
         {
            if (x == 95 && y == 5) { if (img1.getPixel(x,y) != pix1) { throw err; } }
            else if (img1.getPixel(x,y) != black) { throw err; }
         }
      }
      itPassed(desc);
   }
   catch(string s){ itFailed(desc + " " + s); }
}

// construct an image from a file
// use getFormat(), getMaxColor(), getWidth(), getHeight(), getPixel()
void test_stream_input_constructor_1()
{
   // TEST WAS PROVIDED
   // Read in an image file to create an Image.
   // Check that image format, width, height, and maxcolor
   // are correctly set.  Also check that the first three
   // and the last three pixels of the the image are correct.

   string imagefilestr = "images_noisy/n44f/n44f_001.ppm";
   string desc = "construct image from file " + imagefilestr + ", check parameters";
   ifstream imagefile(imagefilestr.c_str());
   Image img1(imagefile);
   imagefile.close();

   try {
      if (img1.getFormat() != "P3") { throw err; }
      if (img1.getMaxColor() != 255) { throw err; }
      if (img1.getWidth() != 600) { throw err; }
      if (img1.getHeight() != 339) { throw err; }
      itPassed(desc);
   }
   catch(string s){ itFailed(desc + " " + s); }

   desc = "construct image from file " + imagefilestr + ", test pixels";
   try {
      if (img1.getPixel(0,0) != Pixel(0,0,0)) { throw err; }
      if (img1.getPixel(1,0) != Pixel(0,10,16)) { throw err; }
      if (img1.getPixel(2,0) != Pixel(86,8,14)) { throw err; }
      if (img1.getPixel(597,338) != Pixel(255,100,0)) { throw err; }
      if (img1.getPixel(598,338) != Pixel(17,118,0)) { throw err; }
      if (img1.getPixel(599,338) != Pixel(255,0,0)) { throw err; }
      itPassed(desc);
   }
   catch(string s){ itFailed(desc + " " + s); }
}

// construct an image from a file
// use getFormat(), getMaxColor(), getWidth(), getHeight(), getPixel()
void test_stream_input_constructor_2()
{
   // TEST WAS PROVIDED
   // Read in an image file to create an Image.
   // Check that image format, width, height, and maxcolor
   // are correctly set.  Also check that the first three
   // and the last three pixels of the the image are correct.

   string imagefilestr = "images_noisy/orion/orion_010.ppm";
   string desc = "construct image from file " + imagefilestr + ", check parameters";
   ifstream imagefile(imagefilestr.c_str());
   Image img1(imagefile);
   imagefile.close();

   try {
      if (img1.getFormat() != "P3") { throw err; }
      if (img1.getMaxColor() != 255) { throw err; }
      if (img1.getWidth() != 600) { throw err; }
      if (img1.getHeight() != 600) { throw err; }
      itPassed(desc);
   }
   catch(string s){ itFailed(desc + " " + s); }

   desc = "construct image from file " + imagefilestr + ", test pixels";
   try {
      if (img1.getPixel(0,0) != Pixel(0,0,16)) { throw err; }
      if (img1.getPixel(1,0) != Pixel(0,0,0)) { throw err; }
      if (img1.getPixel(2,0) != Pixel(14,0,16)) { throw err; }
      if (img1.getPixel(597,599) != Pixel(0,0,18)) { throw err; }
      if (img1.getPixel(598,599) != Pixel(0,4,16)) { throw err; }
      if (img1.getPixel(599,599) != Pixel(0,4,0)) { throw err; }
      itPassed(desc);
   }
   catch(string s){ itFailed(desc + " " + s); }
}

// test stream output
void test_stream_output_1()
{
   // TEST PROVIDED
   // Create a default image and write the image to a file.
   string imagefiledest = "defaultimage.ppm";
   string desc = "creating a default image and writing it to " + imagefiledest;
   Image img1;

   ofstream outfile(imagefiledest.c_str());
   outfile << img1;
   outfile.close();
   int line = 1;

   ifstream imgdest(imagefiledest.c_str());
   // Read in imagefiledest and check that each line is correct
   try {
      string destline;

      // format 
      getline(imgdest,destline);
      if (destline != "P3") { throw err; }
      ++line;

      // width and height
      getline(imgdest,destline);
      if (destline != "100 100") { throw err; }
      ++line;

      // max color
      getline(imgdest,destline);
      if (destline != "255") { throw err; }
      ++line;

      while (line < 10003) 
      {
         getline(imgdest,destline);
         if (destline != "0 0 0") { throw err; }
         ++line;
      }
      itPassed(desc);
   }
   catch(string s) 
   { 
      stringstream tmp;
      tmp << line;
      itFailed(desc + " line: " + tmp.str() + " incorrect "  + s); 
   }
   imgdest.close();
}

// test stream output
void test_stream_output_2()
{
   // TEST PROVIDED
   // Read in an image file to create an Image, then write that
   // image out to a new file. 

   string imagefilesrc = "images_noisy/n44f/n44f_001.ppm";
   string imagefiledest = "testimage.ppm";
   string desc = "creating an image from file " + imagefilesrc + 
                 " and writing image to " + imagefiledest;
   ifstream imagefile(imagefilesrc.c_str());
   Image img1(imagefile);
   imagefile.close();

   ofstream outfile(imagefiledest.c_str());
   outfile << img1;
   outfile.close();
   int line = 1;

   ifstream imgsrc(imagefilesrc.c_str());
   ifstream imgdest(imagefiledest.c_str());
   // Read in both imagefilesrc and imagefiledest and compare line-by-line
   try {
      string srcline, destline;
      while (! imgsrc.eof()) 
      {
         getline(imgsrc,srcline);
         getline(imgdest,destline);
         if (srcline != destline) { throw err; }
         ++line;
      }
      itPassed(desc);
   }
   catch(string s) 
   { 
      stringstream tmp;
      tmp << line;
      itFailed(desc + " line: " + tmp.str() + " different "  + s); 
   }
   imgsrc.close();
   imgdest.close();
}

// make a copy of an image
void test_copy_constructor_1()
{
   Image img1(250, 400, 96, 66, 236);
   Image imgcopy(img1);

   string desc = "make a copy of an image, check parameters";
   try
   {
      if (img1.getFormat() != imgcopy.getFormat()) { throw err; }
      if (img1.getMaxColor() != imgcopy.getMaxColor()) { throw err; }
      if (img1.getWidth() != imgcopy.getWidth()) { throw err; }
      if (img1.getHeight() != imgcopy.getHeight()) { throw err; }
      itPassed(desc);
   }
   catch(string s) { itFailed(desc + " " + s); }

   desc = "make a copy of an image, check pixels";
   try
   {
      for (int y = 0; y < img1.getHeight(); y++)
         for (int x = 0; x < img1.getWidth(); x++)
            if (img1.getPixel(x,y) != imgcopy.getPixel(x,y)) { throw err; }
      itPassed(desc);
   }
   catch(string s) { itFailed(desc + " " + s); }
}

// make a copy of an image, test copy independence
void test_copy_constructor_2()
{
   Image img1(250, 400, 96, 66, 236);
   Image imgcopy(img1);

   string desc = "make a copy of an image, test copy independence";
   // Change the copy; make sure original is unchanged
   for (int y = 0; y < imgcopy.getHeight(); y++)
      for (int x = 0; x < imgcopy.getWidth(); x++)
         imgcopy.setPixel(x,y,5,5,5);
   try
   {
      for (int y = 0; y < img1.getHeight(); y++)
         for (int x = 0; x < img1.getWidth(); x++)
            if (img1.getPixel(x,y) == imgcopy.getPixel(x,y)) { throw err; }
      itPassed(desc);
   }
   catch(string s) { itFailed(desc + " " + s); }
}

// assign an image to some other existing image
void test_assignment_operator_1()
{
   Image img1;
   Image img2(250, 400, 96, 66, 236);
   img1 = img2;

   string desc = "make an image assignment, check parameters";
   try
   {
      if (img1.getFormat() != img2.getFormat()) { throw err; }
      if (img1.getMaxColor() != img2.getMaxColor()) { throw err; }
      if (img1.getWidth() != img2.getWidth()) { throw err; }
      if (img1.getHeight() != img2.getHeight()) { throw err; }
      itPassed(desc);
   }
   catch(string s) { itFailed(desc + " " + s); }

   desc = "make an image assignment, check pixels";
   try
   {
      for (int y = 0; y < img1.getHeight(); y++)
         for (int x = 0; x < img1.getWidth(); x++)
            if (img1.getPixel(x,y) != img2.getPixel(x,y)) { throw err; }
      itPassed(desc);
   }
   catch(string s) { itFailed(desc + " " + s); }
}

// check that self-assignment was handled 
void test_assignment_operator_2()
{
   string desc = "check that self-assignment was handled properly";
   Image img1;
   img1 = img1;
   itPassed(desc);
}


int main() {
   print("\nTests for Image basic functionality ...");
   test_constructor_1();
   test_constructor_2();
   test_constructor_3();
   test_constructor_4();
   test_setters_1();
   test_setters_2();
   test_setters_3();
   test_setters_4();
   test_setters_5();
   test_setters_6();
   print("\n*** Image basic functionality tests finished. ***");

   print("\nTests for Image stream input constructor ...");
   test_stream_input_constructor_1();
   test_stream_input_constructor_2();
   print("\n*** Image stream input constructor tests finished. ***");

   print("\nTests for Image stream output ...");
   test_stream_output_1();
   test_stream_output_2();
   print("\n*** Image stream output tests finished. ***");

   print("\nTests for Image copy constructor and assignment operator ..."); 
   test_copy_constructor_1();
   test_copy_constructor_2();
   test_assignment_operator_1();
   test_assignment_operator_2();
   print("\n*** Image copy constructor and assignment operator tests finished. ***");


   // ======================== SUMMARY INFORMATION ====================== //
   int num_tests = tests_passed + tests_failed;
   double passed = (double) tests_passed;
   double total = (double) num_tests;
   cout << "\nNumber of segmentation faults encountered during testing = "
        << segmentation_faults << endl;
   cout << "Number of infinite loops encountered during testing = "
        << infinite_loops << endl;
   cout << "Number of tests passed = " << tests_passed << " out of "
        << num_tests << endl;
   cout << "Number of tests failed = " << tests_failed << " out of "
        << num_tests << endl;
   cout << "Percent of tests passed = " << (100 * passed / total)
        << "%" << endl << endl;

   return 0;
}
